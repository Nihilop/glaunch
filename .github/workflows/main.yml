name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "src-tauri"
          cache-on-failure: true

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path | tr -d '\n')" >> $GITHUB_ENV

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Get version from Cargo.toml
        id: get_version
        shell: pwsh
        run: |
          $cargoToml = Get-Content "src-tauri/Cargo.toml" -Raw
          $version = Select-String -Pattern 'version = "(.*?)"' -InputObject $cargoToml | ForEach-Object { $_.Matches.Groups[1].Value }
          echo "VERSION=$version" >> $env:GITHUB_ENV
          echo "Current version: $version"

      - name: Setup environment variables
        shell: pwsh
        run: |
          $envContent = Get-Content "src-tauri/.env.production" -Raw
          $envContent = $envContent.Replace('%STEAM_API_KEY%', '${{ secrets.STEAM_API_KEY }}')
          $envContent = $envContent.Replace('%EPIC_CLIENT_ID%', '${{ secrets.EPIC_CLIENT_ID }}')
          $envContent = $envContent.Replace('%EPIC_CLIENT_SECRET%', '${{ secrets.EPIC_CLIENT_SECRET }}')
          $envContent = $envContent.Replace('%BATTLENET_CLIENT_ID%', '${{ secrets.BATTLENET_CLIENT_ID }}')
          $envContent = $envContent.Replace('%BATTLENET_CLIENT_SECRET%', '${{ secrets.BATTLENET_CLIENT_SECRET }}')
          $envContent = $envContent.Replace('%IGDB_CLIENT_ID%', '${{ secrets.IGDB_CLIENT_ID }}')
          $envContent = $envContent.Replace('%IGDB_CLIENT_SECRET%', '${{ secrets.IGDB_CLIENT_SECRET }}')
          $envContent | Set-Content "src-tauri/.env.production"

      - name: Install dependencies
        run: pnpm install

      - name: Build
        env:
          VITE_STEAM_API_KEY: ${{ secrets.STEAM_API_KEY }}
          VITE_EPIC_CLIENT_ID: ${{ secrets.EPIC_CLIENT_ID }}
          VITE_EPIC_CLIENT_SECRET: ${{ secrets.EPIC_CLIENT_SECRET }}
          VITE_BATTLENET_CLIENT_ID: ${{ secrets.BATTLENET_CLIENT_ID }}
          VITE_BATTLENET_CLIENT_SECRET: ${{ secrets.BATTLENET_CLIENT_SECRET }}
          VITE_IGDB_CLIENT_ID: ${{ secrets.IGDB_CLIENT_ID }}
          VITE_IGDB_CLIENT_SECRET: ${{ secrets.IGDB_CLIENT_SECRET }}
          RUST_BACKTRACE: 1
          RUST_LOG: "debug"
        run: pnpm tauri build

      - name: Verify version matches
        shell: pwsh
        run: |
          $tag_version = "${{ github.ref }}".Replace('refs/tags/v', '')
          $cargo_version = $env:VERSION
          if ($tag_version -ne $cargo_version) {
            Write-Error "Version mismatch! Tag version ($tag_version) does not match Cargo.toml version ($cargo_version)"
            exit 1
          }
          echo "Versions match: $cargo_version"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: GLaunch v${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            src-tauri/target/release/bundle/msi/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}